#!/usr/bin/env node
"use strict";var __awaiter=this&&this.__awaiter||function(e,n,t,i){return new(t||(t=Promise))((function(s,r){function o(e){try{l(i.next(e))}catch(e){r(e)}}function a(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var n;e.done?s(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(o,a)}l((i=i.apply(e,n||[])).next())}))};const Enquirer=require("enquirer"),colors=require("ansi-colors"),styles=require("enquirer/lib/styles"),{execSync:execSync}=require("child_process"),replaceall=require("replaceall"),argv=require("minimist")(process.argv.slice(2)),fs=require("fs"),utils={logSpeak:e=>{utils.logSafely(`${colors.bold.blue("âž¤")} ${colors.bold(e)}`)},logSafely:e=>{console.log(`${e}[0m`)},path:"./",execInPath:e=>{execSync(e,{cwd:utils.path})},execInPathParent:e=>{execSync(e,{cwd:`../${utils.path}`})}},main=()=>__awaiter(void 0,void 0,void 0,(function*(){if(argv._.includes("argumented")){const e={tailwind:!1,eslint:!1,stylelint:!1,eslintRecommended:!1,stylelintRecommended:!1,internal:!1,routing:!1};let n=argv.path;n=n.replace(/[^a-zA-Z0-9]/gim,""),e.tailwind="TRUE"===argv.tailwind.toUpperCase(),e.eslint="TRUE"===argv.eslint.toUpperCase(),e.stylelint="TRUE"===argv.stylelint.toUpperCase(),e.internal=argv._.includes("internal"),e.eslint&&(e.eslintRecommended="TRUE"===argv.recommended_eslint_config.toUpperCase()),e.stylelint&&(e.stylelintRecommended="TRUE"===argv.recommended_stylelint_config.toUpperCase()),e.routing="TRUE"===argv.routing.toUpperCase(),e.routing&&(e.recommendedWindows="TRUE"===argv.recommended_windows.toUpperCase(),e.customFallbacks="TRUE"===argv.custom_fallbacks.toUpperCase(),"basename"in argv&&(e.basename=argv.basename),"unresponsive_ms"in argv&&!Number.isNaN(parseInt(argv.unresponsive_ms))&&(e.unresponsiveMs=parseInt(argv.unresponsive_ms)),"pending_ms"in argv&&!Number.isNaN(parseInt(argv.pending_ms))&&(e.pendingMs=parseInt(argv.pending_ms)),"max_age"in argv&&!Number.isNaN(parseInt(argv.max_age))&&(e.maxAge=parseInt(argv.max_age))),utils.path=n,yield bootstrap(e)}else styles.primary=colors.blue,styles.danger=colors.blue,styles.success=colors.blue,styles.warning=colors.blue,yield setup()})),setup=()=>__awaiter(void 0,void 0,void 0,(function*(){const e={tailwind:!1,eslint:!1,stylelint:!1,eslintRecommended:!1,stylelintRecommended:!1,internal:argv._.includes("internal"),routing:!1};utils.logSpeak("Welcome to the Octobox installer!");let n=!1;const t=new Enquirer.Input({name:"loc",message:"Where should your app be bootstrapped?",initial:"app",result:e=>{if(/[^a-zA-Z0-9]/gim.test(e))return e=e.replace(/[^a-zA-Z0-9]/gim,""),n=!0,e}});if(utils.path=yield t.run(),n){const e=new Enquirer.Confirm({name:"loc_confirm",message:`Octobox only supports 0-9 and A-Z for bootstrapping locations. Your app will be stored at ./${utils.path}/ instead. Is this OK?`});(yield e.run())||(utils.logSpeak("Okay, you can restart. Octobox will now exit. Bye!"),process.exit())}const i=new Enquirer.Confirm({name:"tw",message:"Do you want to use TailwindCSS in this app?"});e.tailwind=yield i.run();const s=new Enquirer.Confirm({name:"esl",message:"Do you want to use ESLint in this app?"});if(e.eslint=yield s.run(),e.eslint){const n=new Enquirer.Confirm({name:"eslr",message:"With Octobox's recommended ESLint configuration?"});e.eslintRecommended=yield n.run()}const r=new Enquirer.Confirm({name:"stl",message:"Do you want to use Stylelint in this app?"});if(e.stylelint=yield r.run(),e.stylelint){const n=new Enquirer.Confirm({name:"stlr",message:"With Octobox's recommended Stylelint configuration?"});e.stylelintRecommended=yield n.run()}if(e.routing=yield new Enquirer.Confirm({name:"routing",message:"Do you want to use Octobox's router in this app?"}).run(),e.routing){if(e.recommendedWindows=yield new Enquirer.Confirm({name:"recommendedWindows",message:'Do you want to automatically create top-level "$default" and "$wildcard" windows?'}).run(),e.customFallbacks=yield new Enquirer.Confirm({name:"customFallbacks",message:"Do you want to use custom pending and error elements?"}).run(),(yield new Enquirer.Confirm({name:"routingBasename",message:"Is your app going to be hosted on a nested directory?"}).run())&&(e.basename=yield new Enquirer.Input({name:"basename",message:"What will this directory be?",initial:""}).run()),yield new Enquirer.Confirm({name:"routingUnresponsive",message:"Do you want to set a custom unresponsive time for the router?"}).run()){let n=yield new Enquirer.NumberPrompt({name:"unresponsive",message:"How long, in milliseconds, should this be?",result:e=>Number.isNaN(parseInt(e))?void 0:e}).run();void 0!==n&&(n=parseInt(n),e.unresponsiveMs=n)}if(yield new Enquirer.Confirm({name:"routingPending",message:"Do you want to set a custom pending time for the router?"}).run()){let n=yield new Enquirer.NumberPrompt({name:"pending",message:"How long, in milliseconds, should this be?",result:e=>Number.isNaN(parseInt(e))?void 0:e}).run();void 0!==n&&(n=parseInt(n),e.pendingMs=n)}if(yield new Enquirer.Confirm({name:"routingAge",message:"Do you want to set a custom maximum cache age for the router?"}).run()){let n=yield new Enquirer.NumberPrompt({name:"age",message:"How long, in milliseconds, should this be?",result:e=>Number.isNaN(parseInt(e))?void 0:e}).run();void 0!==n&&(n=parseInt(n),e.maxAge=n)}}let o="";for(const n in e)o+=`\n  ${n}: ${e[n]}`;utils.logSpeak(`Your app's settings are:${o}`);(yield new Enquirer.Confirm({name:"final_confirm",message:"Is all of this information correct?"}).run())?yield bootstrap(e):(utils.logSpeak("Okay, you can restart. Octobox will now exit. Bye!"),process.exit())})),bootstrap=e=>__awaiter(void 0,void 0,void 0,(function*(){if(utils.logSpeak("Bootstrapping..."),execSync(`npm create vite@2.9.2 ${utils.path} -- --template react-ts`,{cwd:"./"}),utils.execInPath("npm i"),fs.unlinkSync(`${utils.path}/index.html`),fs.unlinkSync(`${utils.path}/src/App.css`),fs.unlinkSync(`${utils.path}/src/App.tsx`),fs.unlinkSync(`${utils.path}/src/index.css`),fs.unlinkSync(`${utils.path}/src/logo.svg`),fs.unlinkSync(`${utils.path}/src/main.tsx`),fs.unlinkSync(`${utils.path}/src/favicon.svg`),e.routing?fs.writeFileSync(`${utils.path}/index.html`,'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/src/main.tsx"><\/script>\n  </body>\n</html>\n'):fs.writeFileSync(`${utils.path}/index.html`,'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    <title>Octobox App</title>\n  </head>\n  <body>\n    <div id="root"></div>\n    <script type="module" src="/src/main.tsx"><\/script>\n  </body>\n</html>\n'),fs.writeFileSync(`${utils.path}/src/main.tsx`,'import React from "react";\nimport ReactDOM from "react-dom/client";\nimport "./styles/main.scss";\nimport { App } from "./App";\n\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nReactDOM.createRoot(document.getElementById("root")!).render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>\n);\n'),e.routing){let n="<Filesystem";void 0!==e.basename&&(n+=` basename={"${e.basename}"}`),void 0!==e.unresponsiveMs&&(n+=` unresponsiveMs={${e.unresponsiveMs}}`),void 0!==e.pendingMs&&(n+=` pendingMs={${e.pendingMs}}`),void 0!==e.maxAge&&(n+=` maxAge={${e.maxAge}}`),n+="/>",fs.writeFileSync(`${utils.path}/src/App.tsx`,`import React, { FC, ReactElement } from "react";\nimport { Filesystem } from "octobox-utils";\n\ninterface Props {\n\n}\n\nexport const App: FC<Props> = (): ReactElement => {\n  return (\n    <React.Fragment>\n      ${n}\n    </React.Fragment>\n  );\n};\n`)}else fs.writeFileSync(`${utils.path}/src/App.tsx`,'import React, { FC, ReactElement } from "react";\n\ninterface Props {\n\n}\n\nexport const App: FC<Props> = (): ReactElement => {\n  return (\n    <React.Fragment>\n      <h1>Hello world!</h1>\n    </React.Fragment>\n  );\n};\n');utils.execInPath("npm i -D sass"),fs.mkdirSync(`${utils.path}/src/styles/`),fs.writeFileSync(`${utils.path}/src/styles/main.scss`,""),utils.execInPath("npm i -D puppeteer ts-node"),fs.mkdirSync(`${utils.path}/test/`),fs.writeFileSync(`${utils.path}/test/main.test.ts`,'const { createServer } = require("vite");\nconst puppeteer = require("puppeteer");\nconst { Page } = require("puppeteer");\n\nconst tests = async (tester: typeof Page) => {\n  // add your tests here\n};\n\n(async (port: number, test: (tester: typeof Page) => Promise<void>) => {\n  const server = await createServer({\n    configFile: false,\n    root: "./",\n    server: {\n      port\n    }\n  });\n  await server.listen();\n  server.printUrls();\n  const tester: typeof Page = await (await puppeteer.launch()).newPage();\n  await tester.goto(`http://localhost:${port}`);\n  await test(tester);\n  process.exit();\n})(4000, tests);\n');const n=JSON.parse(fs.readFileSync(`${utils.path}/package.json`));if(n.scripts.test="ts-node --skipProject ./test/main.test.ts",fs.writeFileSync(`${utils.path}/package.json`,JSON.stringify(n,null,2)),e.tailwind){utils.execInPath("npm i -D tailwindcss postcss autoprefixer"),utils.execInPath("npx tailwindcss init -p");const e=fs.readFileSync(`${utils.path}/postcss.config.js`).toString().trim();fs.writeFileSync(`${utils.path}/postcss.config.js`,`${e};`),fs.writeFileSync(`${utils.path}/tailwind.config.js`,'module.exports = {\n  content: [\n    "./src/**/*.{js,jsx,ts,tsx}",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n'),fs.writeFileSync(`${utils.path}/src/styles/main.scss`,"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n")}if(e.eslint){utils.execInPath("npm i -D @modyqyw/vite-plugin-eslint eslint eslint-plugin-react@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest");let n=fs.readFileSync(`${utils.path}/vite.config.ts`).toString().trim();const t=n.split("\n");t.splice(2,0,'import ESLintPlugin from "@modyqyw/vite-plugin-eslint";'),t[6]="  plugins: [ react(), ESLintPlugin() ],",n="";for(const e of t)n+=`${e}\n`;fs.writeFileSync(`${utils.path}/vite.config.ts`,n);let i="";e.eslintRecommended&&(i=',\n    "octobox"',e.internal?utils.execInPath("npm link -D eslint-config-octobox"):utils.execInPath("npm i -D eslint-config-octobox")),fs.writeFileSync(`${utils.path}/.eslintrc.js`,`module.exports = {\n  "root": true,\n  "env": {\n    "browser": true,\n    "es2021": true\n  },\n  "extends": [\n    "eslint:recommended",\n    "plugin:react/recommended",\n    "plugin:@typescript-eslint/recommended"${i}\n  ],\n  "parser": "@typescript-eslint/parser",\n  "parserOptions": {\n    "ecmaFeatures": {\n      "jsx": true\n    },\n    "ecmaVersion": "latest",\n    "sourceType": "module"\n  },\n  "plugins": [\n    "react",\n    "@typescript-eslint"\n  ],\n  "rules": {\n    "@typescript-eslint/no-empty-interface": [\n      "off"\n    ]\n  }\n};\n`)}if(e.stylelint){utils.execInPath("npm i -D stylelint stylelint-config-standard-scss vite-plugin-stylelint");let n=fs.readFileSync(`${utils.path}/vite.config.ts`).toString().trim();const t=n.split("\n");t.splice(e.eslint?3:2,0,'import StylelintPlugin from "vite-plugin-stylelint";'),e.eslint?t[7]="  plugins: [ react(), ESLintPlugin(), StylelintPlugin() ],":t[6]="  plugins: [ react(), StylelintPlugin() ],",n="";for(const e of t)n+=`${e}\n`;fs.writeFileSync(`${utils.path}/vite.config.ts`,n);let i="";e.stylelintRecommended&&(i=',\n    "stylelint-config-octobox"',e.internal?utils.execInPath("npm link -D stylelint-config-octobox"):utils.execInPath("npm i -D stylelint-config-octobox")),e.tailwind?fs.writeFileSync(`${utils.path}/.stylelintrc.js`,`module.exports = {\n  "extends": [\n    "stylelint-config-standard-scss"${i}\n  ],\n  "rules": {\n    "scss/at-rule-no-unknown": [\n      true,\n      {\n        "ignoreAtRules": [ "tailwind" ]\n      }\n    ]\n  }\n};`):fs.writeFileSync(`${utils.path}/.stylelintrc.js`,`module.exports = {\n  "extends": [\n    "stylelint-config-standard-scss"${i}\n  ],\n  "rules": {}\n};`)}if(e.internal?utils.execInPath("npm link -D octobox-utils"):utils.execInPath("npm i -D octobox-utils"),e.routing&&(fs.mkdirSync(`${utils.path}/src/windows/`),e.recommendedWindows?(fs.writeFileSync(`${utils.path}/src/windows/Window.tsx`,'import React, { FC, ReactElement } from "react";\nimport { Outlet } from "octobox-utils";\nimport { WindowLoader } from "octobox-utils";\n\ninterface Props {\n\n}\n\nconst Window: FC<Props> = (): ReactElement => {\n  return (\n    <React.Fragment>\n      <Outlet/>\n    </React.Fragment>\n  );\n};\n\nexport const Loader: WindowLoader = async () => {\n  return {\n    metadata: {\n      title: "Octobox App",\n    }\n  };\n};\n\nexport default Window;\n'),fs.mkdirSync(`${utils.path}/src/windows/$default/`),fs.mkdirSync(`${utils.path}/src/windows/$wildcard/`),fs.writeFileSync(`${utils.path}/src/windows/$default/Window.tsx`,'import React, { FC, ReactElement } from "react";\n\ninterface Props {\n\n}\n\nconst Window: FC<Props> = (): ReactElement => {\n  return (\n    <React.Fragment>\n      <h1>Hello world!</h1>\n    </React.Fragment>\n  );\n};\n\nexport default Window;\n'),fs.writeFileSync(`${utils.path}/src/windows/$wildcard/Window.tsx`,'import React, { FC, ReactElement } from "react";\n\ninterface Props {\n\n}\n\nconst Window: FC<Props> = (): ReactElement => {\n  return (\n    <React.Fragment>\n      \n    </React.Fragment>\n  );\n};\n\nexport default Window;\n')):fs.writeFileSync(`${utils.path}/src/windows/Window.tsx`,'import React, { FC, ReactElement } from "react";\nimport { WindowLoader } from "octobox-utils";\n\ninterface Props {\n\n}\n\nconst Window: FC<Props> = (): ReactElement => {\n  return (\n    <React.Fragment>\n      \n    </React.Fragment>\n  );\n};\n\nexport const Loader: WindowLoader = async () => {\n  return {\n    metadata: {\n      title: "Octobox App",\n    }\n  };\n};\n\nexport default Window;\n'),e.customFallbacks&&(fs.mkdirSync(`${utils.path}/src/windows/$error/`),fs.mkdirSync(`${utils.path}/src/windows/$pending/`),fs.writeFileSync(`${utils.path}/src/windows/$error/Window.tsx`,'import React, { FC, ReactElement } from "react";\n\ninterface Props {\n\n}\n\nconst Window: FC<Props> = (): ReactElement => {\n  return (\n    <React.Fragment>\n\n    </React.Fragment>\n  );\n};\n\nexport default Window;\n'),fs.writeFileSync(`${utils.path}/src/windows/$pending/Window.tsx`,'import React, { FC, ReactElement } from "react";\n\ninterface Props {\n\n}\n\nconst Window: FC<Props> = (): ReactElement => {\n  return (\n    <React.Fragment>\n\n    </React.Fragment>\n  );\n};\n\nexport default Window;\n')),void 0!==e.basename)){let n=e.basename,t=fs.readFileSync(`${utils.path}/vite.config.ts`).toString().trim();const i=t.split("\n"),s=e=>{try{new URL(e)}catch(e){return!1}return!0};n.length>0&&(n.startsWith("/")&&n.startsWith("./")&&s(n)||(n=`/${n}`)),n.endsWith("/")||(n+="/"),i.splice(i.length-1,0,`  base: "${n}",`),t="";for(const e of i)t+=`${e}\n`;fs.writeFileSync(`${utils.path}/vite.config.ts`,t)}utils.execInPath("npm i"),utils.logSpeak("App created!")}));__awaiter(void 0,void 0,void 0,(function*(){if(argv._.includes("argumented")){const e={tailwind:!1,eslint:!1,stylelint:!1,eslintRecommended:!1,stylelintRecommended:!1,internal:!1,routing:!1};let n=argv.path;n=n.replace(/[^a-zA-Z0-9]/gim,""),e.tailwind="TRUE"===argv.tailwind.toUpperCase(),e.eslint="TRUE"===argv.eslint.toUpperCase(),e.stylelint="TRUE"===argv.stylelint.toUpperCase(),e.internal=argv._.includes("internal"),e.eslint&&(e.eslintRecommended="TRUE"===argv.recommended_eslint_config.toUpperCase()),e.stylelint&&(e.stylelintRecommended="TRUE"===argv.recommended_stylelint_config.toUpperCase()),e.routing="TRUE"===argv.routing.toUpperCase(),e.routing&&(e.recommendedWindows="TRUE"===argv.recommended_windows.toUpperCase(),e.customFallbacks="TRUE"===argv.custom_fallbacks.toUpperCase(),"basename"in argv&&(e.basename=argv.basename),"unresponsive_ms"in argv&&!Number.isNaN(parseInt(argv.unresponsive_ms))&&(e.unresponsiveMs=parseInt(argv.unresponsive_ms)),"pending_ms"in argv&&!Number.isNaN(parseInt(argv.pending_ms))&&(e.pendingMs=parseInt(argv.pending_ms)),"max_age"in argv&&!Number.isNaN(parseInt(argv.max_age))&&(e.maxAge=parseInt(argv.max_age))),utils.path=n,yield bootstrap(e)}else styles.primary=colors.blue,styles.danger=colors.blue,styles.success=colors.blue,styles.warning=colors.blue,yield setup()})).catch(console.error);
