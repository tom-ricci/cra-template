#!/usr/bin/env node
"use strict";var __awaiter=this&&this.__awaiter||function(t,e,s,n){return new(s||(s=Promise))((function(i,r){function a(t){try{l(n.next(t))}catch(t){r(t)}}function o(t){try{l(n.throw(t))}catch(t){r(t)}}function l(t){var e;t.done?i(t.value):(e=t.value,e instanceof s?e:new s((function(t){t(e)}))).then(a,o)}l((n=n.apply(t,e||[])).next())}))};const Enquirer=require("enquirer"),colors=require("ansi-colors"),styles=require("enquirer/lib/styles"),{execSync:execSync}=require("child_process"),replaceall=require("replaceall"),argv=require("minimist")(process.argv.slice(2)),fs=require("fs"),utils={logSpeak:t=>{utils.logSafely(`${colors.bold.blue("âž¤")} ${colors.bold(t)}`)},logSafely:t=>{console.log(`${t}[0m`)},path:"./",execInPath:t=>{execSync(t,{cwd:utils.path})},execInPathParent:t=>{execSync(t,{cwd:`../${utils.path}`})}},main=()=>__awaiter(void 0,void 0,void 0,(function*(){if(argv._.includes("argumented")){const t={tailwind:!1};let e=argv.path;e=e.replace(/[^a-zA-Z0-9]/gim,""),t.tailwind="TRUE"===argv.tailwind.toUpperCase(),utils.path=e,yield bootstrap(t)}else styles.primary=colors.blue,styles.danger=colors.blue,styles.success=colors.blue,styles.warning=colors.blue,yield setup()})),setup=()=>__awaiter(void 0,void 0,void 0,(function*(){const t={tailwind:!1};utils.logSpeak("Welcome to the Octobox installer!");let e=!1;const s=new Enquirer.Input({name:"loc",message:"Where should your app be bootstrapped?",initial:"app",result:t=>{if(/[^a-zA-Z0-9]/gim.test(t))return t=t.replace(/[^a-zA-Z0-9]/gim,""),e=!0,t}});if(utils.path=yield s.run(),e){const t=new Enquirer.Confirm({name:"loc_confirm",message:`Octobox only supports 0-9 and A-Z for bootstrapping locations. Your app will be stored at ./${utils.path}/ instead. Is this OK?`});(yield t.run())||(utils.logSpeak("Octobox will now exit. Bye!"),process.exit())}const n=new Enquirer.Confirm({name:"tw",message:"Do you want to use TailwindCSS in this app?"});t.tailwind=yield n.run(),yield bootstrap(t)})),bootstrap=t=>__awaiter(void 0,void 0,void 0,(function*(){utils.logSpeak("Bootstrapping..."),execSync(`npm create vite@2.8.0 ${utils.path} -- --template react-ts`,{cwd:"./"}),utils.execInPath("npm i"),fs.unlinkSync(`${utils.path}/src/App.css`),fs.unlinkSync(`${utils.path}/src/App.tsx`),fs.unlinkSync(`${utils.path}/src/index.css`),fs.unlinkSync(`${utils.path}/src/logo.svg`),fs.unlinkSync(`${utils.path}/src/main.tsx`),fs.unlinkSync(`${utils.path}/src/favicon.svg`),fs.writeFileSync(`${utils.path}/src/main.tsx`,'import React from "react";\nimport ReactDOM from "react-dom";\nimport "./styles/main.scss";\nimport { App } from "./App";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById("root")\n);\n'),fs.writeFileSync(`${utils.path}/src/App.tsx`,'import React, { FC, ReactElement } from "react";\n\ninterface Props {\n\n}\n\nexport const App: FC<Props> = (): ReactElement => {\n  return (\n    <React.Fragment>\n      <h1>Hello world!</h1>\n    </React.Fragment>\n  );\n};\n'),utils.execInPath("npm i -D sass"),fs.mkdirSync(`${utils.path}/src/styles/`),fs.writeFileSync(`${utils.path}/src/styles/main.scss`,""),utils.execInPath("npm i -D puppeteer ts-node"),fs.mkdirSync(`${utils.path}/test/`),fs.writeFileSync(`${utils.path}/test/main.test.ts`,'const { createServer } = require("vite");\nconst puppeteer = require("puppeteer");\nconst { Page } = require("puppeteer");\n\nconst tests = async (tester: typeof Page) => {\n  // add your tests here\n};\n\n(async (port: number, test: (tester: typeof Page) => Promise<void>) => {\n  const server = await createServer({\n    configFile: false,\n    root: "./",\n    server: {\n      port\n    }\n  });\n  await server.listen();\n  server.printUrls();\n  const tester: typeof Page = await (await puppeteer.launch()).newPage();\n  await tester.goto(`http://localhost:${port}`);\n  await test(tester);\n  process.exit();\n})(4000, tests);\n');const e=JSON.parse(fs.readFileSync(`${utils.path}/package.json`));if(e.scripts.test="ts-node --skipProject ./test/main.test.ts",fs.writeFileSync(`${utils.path}/package.json`,JSON.stringify(e,null,2)),t.tailwind){utils.execInPath("npm i -D tailwindcss postcss autoprefixer"),utils.execInPath("npx tailwindcss init -p");const t=fs.readFileSync(`${utils.path}/postcss.config.js`).toString().trim();fs.writeFileSync(`${utils.path}/postcss.config.js`,`${t};`),fs.writeFileSync(`${utils.path}/tailwind.config.js`,'module.exports = {\n  content: [\n    "./src/**/*.{js,jsx,ts,tsx}",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n'),fs.writeFileSync(`${utils.path}/src/styles/main.scss`,"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n")}utils.execInPath("npm i"),utils.logSpeak("App created!")}));__awaiter(void 0,void 0,void 0,(function*(){if(argv._.includes("argumented")){const t={tailwind:!1};let e=argv.path;e=e.replace(/[^a-zA-Z0-9]/gim,""),t.tailwind="TRUE"===argv.tailwind.toUpperCase(),utils.path=e,yield bootstrap(t)}else styles.primary=colors.blue,styles.danger=colors.blue,styles.success=colors.blue,styles.warning=colors.blue,yield setup()})).catch(console.error);
