#!/usr/bin/env node
"use strict";var __awaiter=this&&this.__awaiter||function(e,t,n,i){return new(n||(n=Promise))((function(s,l){function r(e){try{a(i.next(e))}catch(e){l(e)}}function o(e){try{a(i.throw(e))}catch(e){l(e)}}function a(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(r,o)}a((i=i.apply(e,t||[])).next())}))};const Enquirer=require("enquirer"),colors=require("ansi-colors"),styles=require("enquirer/lib/styles"),{execSync:execSync}=require("child_process"),replaceall=require("replaceall"),argv=require("minimist")(process.argv.slice(2)),fs=require("fs"),utils={logSpeak:e=>{utils.logSafely(`${colors.bold.blue("âž¤")} ${colors.bold(e)}`)},logSafely:e=>{console.log(`${e}[0m`)},path:"./",execInPath:e=>{execSync(e,{cwd:utils.path})},execInPathParent:e=>{execSync(e,{cwd:`../${utils.path}`})}},main=()=>__awaiter(void 0,void 0,void 0,(function*(){if(argv._.includes("argumented")){const e={tailwind:!1,eslint:!1,stylelint:!1,eslintRecommended:!1,stylelintRecommended:!1,internal:!1};let t=argv.path;t=t.replace(/[^a-zA-Z0-9]/gim,""),e.tailwind="TRUE"===argv.tailwind.toUpperCase(),e.eslint="TRUE"===argv.eslint.toUpperCase(),e.stylelint="TRUE"===argv.stylelint.toUpperCase(),e.internal=argv._.includes("internal"),e.eslint&&(e.eslintRecommended="TRUE"===argv.recommended_eslint_config.toUpperCase()),e.stylelint&&(e.stylelintRecommended="TRUE"===argv.recommended_stylelint_config.toUpperCase()),utils.path=t,yield bootstrap(e)}else styles.primary=colors.blue,styles.danger=colors.blue,styles.success=colors.blue,styles.warning=colors.blue,yield setup()})),setup=()=>__awaiter(void 0,void 0,void 0,(function*(){const e={tailwind:!1,eslint:!1,stylelint:!1,eslintRecommended:!1,stylelintRecommended:!1,internal:argv._.includes("internal")};utils.logSpeak("Welcome to the Octobox installer!");let t=!1;const n=new Enquirer.Input({name:"loc",message:"Where should your app be bootstrapped?",initial:"app",result:e=>{if(/[^a-zA-Z0-9]/gim.test(e))return e=e.replace(/[^a-zA-Z0-9]/gim,""),t=!0,e}});if(utils.path=yield n.run(),t){const e=new Enquirer.Confirm({name:"loc_confirm",message:`Octobox only supports 0-9 and A-Z for bootstrapping locations. Your app will be stored at ./${utils.path}/ instead. Is this OK?`});(yield e.run())||(utils.logSpeak("Octobox will now exit. Bye!"),process.exit())}const i=new Enquirer.Confirm({name:"tw",message:"Do you want to use TailwindCSS in this app?"});e.tailwind=yield i.run();const s=new Enquirer.Confirm({name:"esl",message:"Do you want to use ESLint in this app?"});if(e.eslint=yield s.run(),e.eslint){const t=new Enquirer.Confirm({name:"eslr",message:"With Octobox's recommended ESLint configuration?"});e.eslintRecommended=yield t.run()}const l=new Enquirer.Confirm({name:"stl",message:"Do you want to use Stylelint in this app?"});if(e.stylelint=yield l.run(),e.stylelint){const t=new Enquirer.Confirm({name:"stlr",message:"With Octobox's recommended Stylelint configuration?"});e.stylelintRecommended=yield t.run()}yield bootstrap(e)})),bootstrap=e=>__awaiter(void 0,void 0,void 0,(function*(){utils.logSpeak("Bootstrapping..."),execSync(`npm create vite@2.9.2 ${utils.path} -- --template react-ts`,{cwd:"./"}),utils.execInPath("npm i"),fs.unlinkSync(`${utils.path}/src/App.css`),fs.unlinkSync(`${utils.path}/src/App.tsx`),fs.unlinkSync(`${utils.path}/src/index.css`),fs.unlinkSync(`${utils.path}/src/logo.svg`),fs.unlinkSync(`${utils.path}/src/main.tsx`),fs.unlinkSync(`${utils.path}/src/favicon.svg`),fs.writeFileSync(`${utils.path}/src/main.tsx`,'import React from "react";\nimport ReactDOM from "react-dom";\nimport "./styles/main.scss";\nimport { App } from "./App";\n\nReactDOM.createRoot(document.getElementById(\'root\')!).render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>\n);\n'),fs.writeFileSync(`${utils.path}/src/App.tsx`,'import React, { FC, ReactElement } from "react";\n\ninterface Props {\n\n}\n\nexport const App: FC<Props> = (): ReactElement => {\n  return (\n    <React.Fragment>\n      <h1>Hello world!</h1>\n    </React.Fragment>\n  );\n};\n'),utils.execInPath("npm i -D sass"),fs.mkdirSync(`${utils.path}/src/styles/`),fs.writeFileSync(`${utils.path}/src/styles/main.scss`,""),utils.execInPath("npm i -D puppeteer ts-node"),fs.mkdirSync(`${utils.path}/test/`),fs.writeFileSync(`${utils.path}/test/main.test.ts`,'const { createServer } = require("vite");\nconst puppeteer = require("puppeteer");\nconst { Page } = require("puppeteer");\n\nconst tests = async (tester: typeof Page) => {\n  // add your tests here\n};\n\n(async (port: number, test: (tester: typeof Page) => Promise<void>) => {\n  const server = await createServer({\n    configFile: false,\n    root: "./",\n    server: {\n      port\n    }\n  });\n  await server.listen();\n  server.printUrls();\n  const tester: typeof Page = await (await puppeteer.launch()).newPage();\n  await tester.goto(`http://localhost:${port}`);\n  await test(tester);\n  process.exit();\n})(4000, tests);\n');const t=JSON.parse(fs.readFileSync(`${utils.path}/package.json`));if(t.scripts.test="ts-node --skipProject ./test/main.test.ts",fs.writeFileSync(`${utils.path}/package.json`,JSON.stringify(t,null,2)),e.tailwind){utils.execInPath("npm i -D tailwindcss postcss autoprefixer"),utils.execInPath("npx tailwindcss init -p");const e=fs.readFileSync(`${utils.path}/postcss.config.js`).toString().trim();fs.writeFileSync(`${utils.path}/postcss.config.js`,`${e};`),fs.writeFileSync(`${utils.path}/tailwind.config.js`,'module.exports = {\n  content: [\n    "./src/**/*.{js,jsx,ts,tsx}",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n'),fs.writeFileSync(`${utils.path}/src/styles/main.scss`,"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n")}if(e.eslint){utils.execInPath("npm i -D @modyqyw/vite-plugin-eslint eslint eslint-plugin-react@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest");let t=fs.readFileSync(`${utils.path}/vite.config.ts`).toString().trim();const n=t.split("\n");n.splice(2,0,'import ESLintPlugin from "@modyqyw/vite-plugin-eslint";'),n[6]="  plugins: [ react(), ESLintPlugin() ]",t="";for(const e of n)t+=`${e}\n`;fs.writeFileSync(`${utils.path}/vite.config.ts`,t);let i="";e.eslintRecommended&&(i=',\n    "octobox"',e.internal?utils.execInPath("npm link -D eslint-config-octobox"):utils.execInPath("npm i -D eslint-config-octobox")),fs.writeFileSync(`${utils.path}/.eslintrc.js`,`module.exports = {\n  "root": true,\n  "env": {\n    "browser": true,\n    "es2021": true\n  },\n  "extends": [\n    "eslint:recommended",\n    "plugin:react/recommended",\n    "plugin:@typescript-eslint/recommended"${i}\n  ],\n  "parser": "@typescript-eslint/parser",\n  "parserOptions": {\n    "ecmaFeatures": {\n      "jsx": true\n    },\n    "ecmaVersion": "latest",\n    "sourceType": "module"\n  },\n  "plugins": [\n    "react",\n    "@typescript-eslint"\n  ],\n  "rules": {\n    "@typescript-eslint/no-empty-interface": [\n      "off"\n    ]\n  }\n};\n`)}if(e.stylelint){utils.execInPath("npm i -D stylelint stylelint-config-standard-scss vite-plugin-stylelint");let t=fs.readFileSync(`${utils.path}/vite.config.ts`).toString().trim();const n=t.split("\n");n.splice(e.eslint?3:2,0,'import StylelintPlugin from "vite-plugin-stylelint";'),e.eslint?n[7]="  plugins: [ react(), ESLintPlugin(), StylelintPlugin() ]":n[6]="  plugins: [ react(), StylelintPlugin() ]",t="";for(const e of n)t+=`${e}\n`;fs.writeFileSync(`${utils.path}/vite.config.ts`,t);let i="";e.stylelintRecommended&&(i=',\n    "stylelint-config-octobox"',e.internal?utils.execInPath("npm link -D stylelint-config-octobox"):utils.execInPath("npm i -D stylelint-config-octobox")),e.tailwind?fs.writeFileSync(`${utils.path}/.stylelintrc.js`,`module.exports = {\n  "extends": [\n    "stylelint-config-standard-scss"${i}\n  ],\n  "rules": {\n    "scss/at-rule-no-unknown": [\n      true,\n      {\n        "ignoreAtRules": [ "tailwind" ]\n      }\n    ]\n  }\n};`):fs.writeFileSync(`${utils.path}/.stylelintrc.js`,`module.exports = {\n  "extends": [\n    "stylelint-config-standard-scss"${i}\n  ],\n  "rules": {}\n};`)}e.internal?utils.execInPath("npm link -D octobox-utils"):utils.execInPath("npm i -D octobox-utils"),utils.execInPath("npm i"),utils.logSpeak("App created!")}));__awaiter(void 0,void 0,void 0,(function*(){if(argv._.includes("argumented")){const e={tailwind:!1,eslint:!1,stylelint:!1,eslintRecommended:!1,stylelintRecommended:!1,internal:!1};let t=argv.path;t=t.replace(/[^a-zA-Z0-9]/gim,""),e.tailwind="TRUE"===argv.tailwind.toUpperCase(),e.eslint="TRUE"===argv.eslint.toUpperCase(),e.stylelint="TRUE"===argv.stylelint.toUpperCase(),e.internal=argv._.includes("internal"),e.eslint&&(e.eslintRecommended="TRUE"===argv.recommended_eslint_config.toUpperCase()),e.stylelint&&(e.stylelintRecommended="TRUE"===argv.recommended_stylelint_config.toUpperCase()),utils.path=t,yield bootstrap(e)}else styles.primary=colors.blue,styles.danger=colors.blue,styles.success=colors.blue,styles.warning=colors.blue,yield setup()})).catch(console.error);
